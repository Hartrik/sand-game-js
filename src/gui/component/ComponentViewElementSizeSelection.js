// Sand Game JS; Patrik Harag, https://harag.cz; all rights reserved

import DomBuilder from "../DomBuilder";
import Component from "./Component";
import Analytics from "../../Analytics";

import _ASSET_IMG_ELEMENT_SIZE_1 from './assets/element-size-1.png'
import _ASSET_IMG_ELEMENT_SIZE_2 from './assets/element-size-2.png'
import _ASSET_IMG_ELEMENT_SIZE_3 from './assets/element-size-3.png'
import _ASSET_IMG_ELEMENT_SIZE_4 from './assets/element-size-4.png'

/**
 *
 * @author Patrik Harag
 * @version 2023-12-22
 */
export default class ComponentViewElementSizeSelection extends Component {

    static CLASS_SELECTED = 'selected-size';

    static SIZES = [
        { scale: 0.75,  image: _ASSET_IMG_ELEMENT_SIZE_1, description: 'Very small elements' },
        { scale: 0.5,   image: _ASSET_IMG_ELEMENT_SIZE_2, description: 'Small elements' },
        { scale: 0.375, image: _ASSET_IMG_ELEMENT_SIZE_3, description: 'Medium elements' },
        { scale: 0.25,  image: _ASSET_IMG_ELEMENT_SIZE_4, description: 'Big elements' },
    ];


    #nodes = [];

    #selected = null;
    #selectedScale = null;

    createNode(controller) {
        for (let sizeDef of ComponentViewElementSizeSelection.SIZES) {
            let node = this.#createSizeCard(sizeDef.scale, sizeDef.image, sizeDef.description);

            // initial scale
            if (sizeDef.scale === controller.getCurrentScale()) {
                this.#mark(node, sizeDef.scale);
            }

            node.addEventListener('click', e => {
                this.#select(node, sizeDef.scale, controller);
            })

            this.#nodes.push(node);
        }

        return DomBuilder.div(null, [
            DomBuilder.par(null, "Increasing the size of the elements will result in the top and right" +
                " parts of the canvas being clipped."),
            DomBuilder.par(null, "Reducing the size of the elements will result in an expansion of" +
                " the canvas in the upper and right parts."),
            DomBuilder.par(null, "Only the scale of the current scene and the initial setting for new" +
                " scenes will be changed. Scene can be regenerated by clicking on the scene card."),

            DomBuilder.div({ class: 'element-size-options' }, this.#nodes)
        ]);
    }

    #select(node, newScale, controller) {
        if (this.#selectedScale === newScale) {
            return;  // already selected
        }

        // mark selected
        if (this.#selected) {
            this.#selected.classList.remove(ComponentViewElementSizeSelection.CLASS_SELECTED);
        }
        this.#mark(node, newScale);

        // change scale
        let w = Math.trunc(controller.getCurrentWidthPoints() / controller.getCurrentScale() * newScale);
        let h = Math.trunc(controller.getCurrentHeightPoints() / controller.getCurrentScale() * newScale);
        controller.changeCanvasSize(w, h, newScale);

        Analytics.triggerFeatureUsed(Analytics.FEATURE_SWITCH_SCALE);
    }

    #mark(node, scale) {
        node.classList.add(ComponentViewElementSizeSelection.CLASS_SELECTED);
        this.#selected = node;
        this.#selectedScale = scale;
    }

    /**
     *
     * @param scale {number}
     * @param image {string}
     * @param description {string}
     */
    #createSizeCard(scale, image, description) {
        return DomBuilder.div({ class: 'card' }, [
            DomBuilder.element('img', { src: image, alt: description })
        ]);
    }
}
