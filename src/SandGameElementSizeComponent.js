import {Assets} from "./Assets.js";
import {DomBuilder} from "./DomBuilder.js";
import {Analytics} from "./Analytics.js";

/**
 *
 * @author Patrik Harag
 * @version 2023-06-05
 */
export class SandGameElementSizeComponent {

    static CLASS_SELECTED = 'selected-size';

    static SIZES = [
        { scale: 0.75,  image: Assets.IMG_ELEMENT_SIZE_1, description: 'Very small elements' },
        { scale: 0.5,   image: Assets.IMG_ELEMENT_SIZE_2, description: 'Small elements' },
        { scale: 0.375, image: Assets.IMG_ELEMENT_SIZE_3, description: 'Medium elements' },
        { scale: 0.25,  image: Assets.IMG_ELEMENT_SIZE_4, description: 'Big elements' },
    ];


    /** @type SandGameControls */
    #controls;

    /** @type function(scale) */
    #selectFunction;

    #initialScale;

    #nodes = [];

    #selected = null;
    #selectedScale = null;


    /**
     *
     * @param sandGameControls {SandGameControls}
     * @param selectFunction
     * @param initialScale
     */
    constructor(sandGameControls, initialScale, selectFunction) {
        this.#controls = sandGameControls;
        this.#initialScale = initialScale;
        this.#selectFunction = selectFunction;
    }

    createNode() {
        for (let sizeDef of SandGameElementSizeComponent.SIZES) {
            let node = this.#createSizeCard(sizeDef.scale, sizeDef.image, sizeDef.description);

            // initial scale
            if (sizeDef.scale === this.#initialScale) {
                this.#mark(node, sizeDef.scale);
            }

            node.on('click', e => {
                this.#onSelect(node, sizeDef.scale);
            })

            this.#nodes.push(node);
        }

        return DomBuilder.div(null, [
            DomBuilder.par(null, "Increasing the size of the elements will result in the top and right" +
                " parts of the canvas being clipped."),
            DomBuilder.par(null, "Reducing the size of the elements will result in an expansion of" +
                " the canvas in the upper and right parts."),
            DomBuilder.par(null, "Only the scale of the current scene and new scenes will be changed." +
                " Scene can be regenerated by clicking on the scene card."),

            DomBuilder.div({ class: 'element-size-options' }, this.#nodes)
        ]);
    }

    #onSelect(node, scale) {
        if (this.#selectedScale === scale) {
            return;  // already selected
        }

        this.#select(node, scale);
        Analytics.triggerFeatureUsed(Analytics.FEATURE_SWITCH_SCALE);
    }

    #select(node, scale) {
        if (this.#selected) {
            this.#selected.removeClass(SandGameElementSizeComponent.CLASS_SELECTED);
        }
        this.#mark(node, scale);
        this.#selectFunction(scale);
    }

    #mark(node, scale) {
        node.addClass(SandGameElementSizeComponent.CLASS_SELECTED);
        this.#selected = node;
        this.#selectedScale = scale;
    }

    /**
     *
     * @param scale {number}
     * @param image {string}
     * @param description {string}
     */
    #createSizeCard(scale, image, description) {
        return DomBuilder.div({ class: 'card' }, [
            DomBuilder.element('img', { src: image, alt: description })
        ]);
    }
}
